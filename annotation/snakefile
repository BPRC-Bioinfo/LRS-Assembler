# Annotation Pipeline Standalone
# v0.0.3
# By Giang Le & Jaimy

import pandas as pd
from glob import glob
from pathlib import Path
from multiprocessing import cpu_count

configfile:"configs/annno_run-config.yaml"
REGIONS = config['region']
SPECIES=config['species'].replace(" ", "_")

fa_files, = glob_wildcards("inputs/{genome}.fa")
fasta_files, = glob_wildcards("inputs/{genome}.fasta")

GENOMES = fa_files + fasta_files

print (f"Welcome to LRS-assembler standalone annotation.")

print (f"Detected {len(GENOMES)} samples for analysis.")


rule all:
    input:
        expand("LRS-annotation/{species}/{genome}/{region}/flanking/{genome}_{region}.annotated", species = SPECIES, region = REGIONS, genome = GENOMES),


def check_library(region_name, library):
    library_path = Path(library)
    if not library_path.is_file():
        print(f"Error: Library file not found at {library} for region {region_name}")
        sys.exit(1)
    return library

## Flanking genes detection
rule download_flanking_genes:
    params:
        left = lambda wildcards: REGIONS[wildcards.region]['left_flank'],
        right = lambda wildcards: REGIONS[wildcards.region]['right_flank'],
        ref = config['species']
    threads: 10
    output:
        temp = temp("flanking_genes/{species}/temp_{region}.fa"),
        final = "flanking_genes/{species}/{region}.fasta",
        info = "flanking_genes/{species}/info_{region}.txt"
    retries: 3
    conda:
        "../envs/flanking.yaml"
    shell:
        """
        left_flank={params.left}
        touch {output.info}

        if [[ ! -z $left_flank ]]; then
            datasets download gene symbol {params.left} --taxon "{params.ref}" --include gene --filename {wildcards.region}_{params.left}.zip  || (echo "Warning: Download left flanking failed. Check gene name.")
            unzip {wildcards.region}_{params.left}.zip -d {wildcards.region}_{params.left}
            cat {wildcards.region}_{params.left}/ncbi_dataset/data/gene.fna >> {output.temp}
            rm -r {wildcards.region}_{params.left} {wildcards.region}_{params.left}.zip
            echo "left:" {params.left} >> {output.info}
            sleep 3
        fi

        right_flank={params.right}
        # Right flanking gene
        if [[ ! -z $right_flank ]]; then
            datasets download gene symbol {params.right} --taxon "{params.ref}" --include gene --filename {wildcards.region}_{params.right}.zip || (echo "Warning: Download right flanking failed. Check gene name.")
            unzip {wildcards.region}_{params.right}.zip -d {wildcards.region}_{params.right}
            cat {wildcards.region}_{params.right}/ncbi_dataset/data/gene.fna >> {output.temp}
            rm -r {wildcards.region}_{params.right}/ {wildcards.region}_{params.right}.zip
            echo "right:" {params.right} >> {output.info}
            sleep 2
        fi
        
        sed -E "s/ \\[.*//g;s/ /_/g" {output.temp} > {output.final}
        echo "Complete download flanking genes for {wildcards.region} region."
        """

rule locate_flanking_genes:
    input:
        fa = lambda wildcards: (
            "inputs/{genome}.fa".format(**wildcards)
            if os.path.exists("inputs/{genome}.fa".format(**wildcards))
            else "inputs/{genome}.fasta".format(**wildcards)
        ),
        flanks = "flanking_genes/{species}/{region}.fasta",
    output:
#        sam = temp("map_temp/{species}/{region}/{genome}_{region}.sam"),
        sam = "map_temp/{species}/{region}/{genome}_{region}_flank_genes.sam",
        flank_region = "map_temp/{species}/{region}/{genome}_{region}_flank_genes.txt"
    log:
        "map_temp/{species}/{region}/logs/{genome}_{region}_flanking.log"
    threads: 6
    conda:
        "../envs/minimap2.yaml"
    shell:
        """
        minimap2 -ax asm5 -t {threads} {input.fa} {input.flanks} > {output.sam} 2> {log}
        cut -f1-5 {output.sam} | grep -v "@" | awk '$3!="*"' > {output.flank_region}
        echo "Mapped {wildcards.region} flanking genes to {wildcards.genome}."
        """

checkpoint check_flanking_genes:
    input:
        loc = "map_temp/{species}/{region}/{genome}_{region}_flank_genes.txt",
        info = "flanking_genes/{species}/info_{region}.txt"
    output:
        status = "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}_status.csv",
        tmp = temp("LRS-annotation/{species}/{genome}/{region}/{genome}_{region}_status.tmp"),
    shell:
        """
        # Extract left and right flanking genes
        left_flank=$(grep 'left' {input.info} | awk -F': ' '{{print $2}}' || true)
        right_flank=$(grep 'right' {input.info} | awk -F': ' '{{print $2}}' || true)

        # Initialize variables to track the contigs for left and right flanking gene
        left_contigs=""
        right_contigs=""

        # Find contigs for left and right genes
        while IFS=$'\t' read -r region_info _ contig position _; do
            gene_name=$(echo $region_info | awk -F'_' '{{print $NF}}')

            if [ "$gene_name" = "$left_flank" ]; then
                left_contigs="$left_contigs $contig"
            elif [ "$gene_name" = "$right_flank" ]; then
                right_contigs="$right_contigs $contig"
            fi
        done < {input.loc}

        # Remove duplicates from the contig lists
        left_contigs=$(echo "$left_contigs" | tr ' ' '\n' | sort -u | tr '\n' ' ')
        right_contigs=$(echo "$right_contigs" | tr ' ' '\n' | sort -u | tr '\n' ' ')

        # Check if both flanking genes are found
        if [ -n "$left_flank" ] && [ -n "$right_flank" ]; then
            common_contigs=$(comm -12 <(echo "$left_contigs" | tr ' ' '\n' | grep -v '^$' | sort) <(echo "$right_contigs" | tr ' ' '\n' | grep -v '^$' | sort))
            # Find unique contigs to the left
            if [ -n "$common_contigs" ]; then
                for contig in $common_contigs; do
                    echo -e "flanks\tclosed\t$left_flank/$right_flank\t$contig" >> {output.tmp}
                done
            else
                left_unique=$(comm -23 <(echo "$left_contigs" | tr ' ' '\n' | grep -v '^$' | sort) <(echo "$right_contigs" | tr ' ' '\n' | grep -v '^$' | sort)| tr '\n' ' ')
                right_unique=$(comm -13 <(echo "$left_contigs" | tr ' ' '\n' | grep -v '^$' | sort) <(echo "$right_contigs" | tr ' ' '\n' | grep -v '^$' | sort)| tr '\n' ' ')

                if [[ -z "$left_unique" && -z "$right_unique" ]]; then
                    echo -e "flanks\tmissing\t*\t*" >> {output.tmp}
                else
                    echo -e "flanks\tfragmented\t$left_flank/$right_flank\t$left_unique/$right_unique" >> {output.tmp}
                fi
            fi
        elif [ -n "$left_flank" ]; then
            if [ -n "$left_contigs" ]; then

                for contig in $left_contigs; do
                    echo -e "telomere\tclosed\t$left_flank/\t$contig" >> {output.tmp}
                done    
            fi
        elif [ -n "$right_flank" ]; then
            if [ -n "$right_contigs" ]; then
                for contig in $left_contigs; do
                    echo -e "telomere\tclosed\t/$right_flank\t$contig" >> {output.tmp}
                done
            fi
        fi
        awk '!s[$0]++' {output.tmp} > {output.status}
        echo "Check {wildcards.region} flanking genes in sample {wildcards.genome}."
        """

## Processing complete fragments
rule region_sam_to_sort_bam:
    input:
        sam = "map_temp/{species}/{region}/{genome}_{region}_flank_genes.sam",
    output:
        bam = temp("map_temp/{species}/{region}/{genome}_{region}_flank_genes.bam"),
        sort = temp("map_temp/{species}/{region}/{genome}_{region}_flank_genes_sort.bam"),
    conda:
        "../envs/samtools.yaml"
    shell:
        """
        samtools view -@ {threads} -bh {input.sam} > {output.bam}
        samtools sort -@ {threads} -o {output.sort} {output.bam}
        """

rule region_intact_bed:
    input:
        sam = "map_temp/{species}/{region}/{genome}_{region}_flank_genes.sam",
        bam = "map_temp/{species}/{region}/{genome}_{region}_flank_genes_sort.bam",
        status = "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}_status.csv",
    output:
        bed = "LRS-annotation/{species}/{genome}/{region}/flanking/{genome}_{region}_flanking_genes.bed",
        bed_mod = temp("LRS-annotation/{species}/{genome}/{region}/flanking/{genome}_{region}_coords.tmp"),
        bed_final = "LRS-annotation/{species}/{genome}/{region}/flanking/{genome}_{region}_region_coords.bed",
    conda:
        "../envs/bedtools.yaml"
    shell:
        """
        # Convert to bed coords
        bedtools bamtobed -i {input.bam} > {output.bed}

        grep "closed" {input.status} |
        while IFS='\t' read -r flank_region flank_status genes contig; do
            if [[ "$flank_region" == "telomere" ]]; then
                # Can there be + and - strands together?
                strand=$(awk -v var="$contig" '$1==var {{print $6}}' {output.bed} | awk '!s[$0]++')
                echo $flank_region $flank_status $genes $contig $strand
                if [[ "$strand" == "+" ]]; then
                    end_coord=$(grep ":$contig\t" {input.sam} | grep "@" | awk -F'LN:' '{{print $2}}')
                    awk -v contig="$contig" -v endcoord="$end_coord" '$1==contig {{print $1"\t"$2"\t"endcoord"\t"$4"\t"$5"\t"$6}}' {output.bed} >> {output.bed_mod}
                else
                    awk '{{ print $1"\t0\t"$3"\t"$4"\t"$5"\t"$6}}' {output.bed} >> {output.bed_mod}
                fi
            else
            # Process closed flank region 
                # Smallest start and largest end
                awk -v var="$contig" '$1==var' {output.bed} |
                awk -v regin="{wildcards.region}" -F'\t' '{{
                  if (!start[$1] || $2 < start[$1]) {{
                    start[$1] = $2
                    region[$1] = regin
                    value[$1] = $5
                    strand[$1] = $6
                  }}
                  if (!end[$1] || $3 > end[$1]) {{
                    end[$1] = $3
                  }}
                }}
                END {{
                  for (key in start) {{
                    print key "\t" start[key] "\t" end[key] "\t" region[key] "\t" value[key] "\t" strand[key]
                  }}
                }}' >> {output.bed_mod}
            fi 
        done
        awk '!s[$2,$3]++' {output.bed_mod} > {output.bed_final}
        """

rule region_intact_contig:
    input:
        bed = "LRS-annotation/{species}/{genome}/{region}/flanking/{genome}_{region}_region_coords.bed",
        fa = lambda wildcards: (
            "inputs/{genome}.fa".format(**wildcards)
            if os.path.exists("inputs/{genome}.fa".format(**wildcards))
            else "inputs/{genome}.fasta".format(**wildcards)
        ),
    output:
        fa = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_intact.fa",
    conda:
        "../envs/bedtools.yaml"
    shell:
        """
        bedtools getfasta -fi {input.fa} -bed {input.bed} -s | sed 's/:.*/_{wildcards.region}/g' > {output.fa}
        echo "Extract intact {wildcards.region} region from sample {wildcards.genome}."
        """

rule library_format:
    input:
        lambda wildcards: check_library(wildcards.region, config['region'][wildcards.region].get('library'))
    output:
        "map_temp/{species}/{region}/library/{species}_{region}_lib.fasta"
    conda:
        "../envs/rename.yaml"
    shell:
        """
        python ../scripts/lib_format.py {input} | seqkit rmdup -s | sed 's/\\r//g' > {output}
        """

rule region_intact_minimap2:
    input:
        fa = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_intact.fa",
        lib = "map_temp/{species}/{region}/library/{species}_{region}_lib.fasta",
    output:
        "map_temp/{species}/{region}/analysis/{genome}_{region}_intact.paf",
    params:
        minimap2 = lambda wildcards: REGIONS[wildcards.region]['minimap2'],
    log:
        "map_temp/{species}/{region}/logs/{genome}_{region}_intact.log"
    threads: 6
    conda:
        "../envs/minimap2.yaml"
    shell:
        """
        # mapping lib to region
        minimap2 {params} -c -t {threads} {input.fa} {input.lib} > {output} 2> {log}
        echo "Mapped {input.lib} to the {wildcards.region} region of the sample {wildcards.genome}."
        """

rule region_intact_cigar_info:
    input:
        "map_temp/{species}/{region}/analysis/{genome}_{region}_intact.paf",
    output:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_gene_coords_paf.txt"
    shell:
        """
        python ../scripts/cigar_digest2.py {input} {output}
        """

rule region_intact_gene_blast:
    input:
        paf = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_gene_coords_paf.txt",
        fa = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_intact.fa",
        lib = "map_temp/{species}/{region}/library/{species}_{region}_lib.fasta",
    output:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_gene_coords_paf.blast",
    log:
        "LRS-annotation/{species}/{genome}/{region}/logs/{genome}_{region}_blast.log"
    conda:
        "../envs/bbstools.yaml"
#    threads: cpu_count()
    threads: lambda wildcards, input: max(2, cpu_count() // 2)
    params:
        blast = lambda wildcards: REGIONS[wildcards.region]['blast'],
    shell:
        """
        python ../scripts/paf_blast.py -p {input.paf} -r {input.lib} -f {input.fa} -o {output} &> {log}
        echo "Aligned {input.lib} to the intact {wildcards.region} region on {wildcards.genome}."
        """

rule region_intact_join_blast_paf:
    input:
        info = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_gene_coords_paf.txt",
        blast = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_gene_coords_paf.blast",
    output:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_candidates.csv"
    shell:
        """
        python ../scripts/blast_extraction.py -i {input.info} -b {input.blast} -o {output}
        echo "Merged Blast and Minimap2 results for {wildcards.region} region on {wildcards.genome}."
        """

rule region_intact_filter:
    input:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_candidates.csv"
    output:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_filter.csv"
    shell:
        """
        python ../scripts/filter_query_ident.py -i {input} -o {output}
        echo "Filter genes for {wildcards.region} region on sample {wildcards.genome}"
        """

rule region_intact_accurate_figure:
    input:
        filtr = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_filter.csv",
        bed = "LRS-annotation/{species}/{genome}/{region}/flanking/{genome}_{region}_flanking_genes.bed",
    output:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_final.tsv"
    shell:
        """
        python ../scripts/coord_correction.py -b {input.bed} -f {input.filtr} -o {output}
        """

rule region_intact_figure:
    input:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_final.tsv"
    conda:
        "../envs/dna_viewer.yaml"
    output:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_report.svg"
    params:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_report"
    threads: 6
    shell:
        """
        python ../scripts/dna_viewer_table.py -i {input} -o {params}
        echo "Generate figure for {wildcards.region} region on sample {wildcards.genome}."
        """

rule gene_bed_file:
    input:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_filter.csv"
    output:
        "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_intact.bed"
    shell:
        """
        sed '/ref_name/d' {input} | awk -F'\t' '{{print $9,$2,$3,$1}}' | sed 's/ /\t/g' > {output}
        """

rule prepare_report:
    input:
        data = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_final.tsv",
        bed = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_intact.bed",
        report = "../scripts/annotation_report.Rmd"
    output:
        "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}.Rmd"
    shell:
        """
        cp {input.report} {output} 
        """

rule region_intact_report:
    input:
        markdown = "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}.Rmd",
        data = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_final.tsv",
        figures = "LRS-annotation/{species}/{genome}/{region}/annotation/{genome}_{region}_report.svg",
#        "figures/v2_{species}_{genome}_{region}.svg",
    output:
        html = "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}_intact.html"
    conda:
        "../envs/report.yaml"
    params:
        "LRS-annotation/{species}/{genome}/{region}/"
    log:
        "LRS-annotation/{species}/{genome}/{region}/logs/{genome}_{region}_report.log"
    shell:
        """
        Rscript -e "rmarkdown::render('{input.markdown}', output_file=paste0('{wildcards.genome}_{wildcards.region}','_intact'), output_format='html_document',params=list(sample='{wildcards.genome}',species='{wildcards.species}', region='{wildcards.region}'))" 2> {log}
        echo "Final report generated"
        """

rule closed_flanks:
    input:
        "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}_intact.html"
    output:
        touch("LRS-annotation/{species}/{genome}/{region}/closed/{genome}_{region}.done")

rule fragmented_flanks:
    input:
        "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}_status.csv"
    output:
        touch("LRS-annotation/{species}/{genome}/{region}/fragmented/{genome}_{region}.done")

rule missing_flanks:
    output:
        touch("LRS-annotation/{species}/{genome}/{region}/missing/{genome}_{region}.done")

def check_gaps(wildcards):
    with checkpoints.check_flanking_genes.get(**wildcards).output[0].open() as f:
        for line in f:
            col1, col2, col3, col4 = line.strip().split("\t")
            if col2 == "closed":
                return "LRS-annotation/{species}/{genome}/{region}/closed/{genome}_{region}.done"
            elif col2 == "fragmented":
                return "LRS-annotation/{species}/{genome}/{region}/fragmented/{genome}_{region}.done"
            else:
                return "LRS-annotation/{species}/{genome}/{region}/missing/{genome}_{region}.done"

rule check_region:
    input:
        check_gaps
    output:
        "LRS-annotation/{species}/{genome}/{region}/flanking/{genome}_{region}.annotated"
    shell:
        "cat {input} > {output}"

onsuccess:
    shell("""
        if [[ $(find ./inputs -name "*.fai" -print -quit 2>/dev/null) ]]; then
            find . -name "*.fai" -delete
        fi
    """)


'''
## Use all cores
    threads: cpu_count()
## Use half available cores
    threads: lambda wildcards, input: max(2, cpu_count() // 2)

rule report_runtime:
    output: "LRS-annotation/{species}/{genome}/{region}/{genome}_{region}_runtime.txt"
    run:
        end_time = time.time()
        elapsed_time = end_time - start_time
        with open(output[0], "w") as f:
            f.write(f"Total runtime: {elapsed_time} seconds\n")
'''
